// cycle detection in directed graph using dfs
// on the same path node has to be visited again then cycle


// if  no cycle return false

// 2 adjency list is to be created

private:
bool dfscheck(int node , vector <int> adj[] , int vis[] , int pathvis[]){
    vis[node]=1;
    pathvis[node]=1;
     for(auto it : adj[node]){
         if(!vis[it]){
            if( dfs(it, adj , vis , pathvis)) return true;
             
         }
         else if(pathvis[it]){
             return true;
             
         }
     }
     pathvis[node] = 0;
     return false;
}

public:
bool iscyclic(int V, vector<int> adj[])
{
    int vis[V] = {0};
    int pathvis[V]= {0};
    for(int i=0;i<V;i++)
    {
        if(!vis[i]){
            if(dfscheck(i,adj,vis,pathvis) == true) return true;
        }
    }
    return false;
    
}
};